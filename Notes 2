
JAVASCRIPT

VARIABLES
---------
---------

It's a good programming practice to declare all variables at the beginning of a script.

let carName = "Volvo";

let person = "John Doe", carName = "Volvo", price = 200;

let person = "John Doe",
carName = "Volvo",
price = 200;

let carName; - means variable is declared but undefined

$ and _ are seen as a letters,  and therefore valid as a variable name


OPERATORS
---------
---------

In JavaScript, the equal sign (=) is an "assignment" operator, not an "equal to" operator.

Arithmetic (Bodmas)

Operator	Description
+	        Addition
-	        Subtraction
*	        Multiplication
**	      Exponentiation - the operation of raising one quantity to the power of another. (ES2016)
/	        Division
%	        Modulus (Division Remainder) - alert(15%9);    - means remainder (6)
++	      Increment
--	      Decrement

Assignment

Operator	Example	   Same As
=	        x = y      x = y              Simple Assignment Operator assigns a value to a variable.
+=	      x += y	   x = x + y          The Addition Assignment Operator adds a value to a variable.
-=	      x -= y	   x = x - y          The Subtraction Assignment Operator subtracts a value from a variable
*=	      x *= y	   x = x * y          The Multiplication Assignment Operator multiplies a variable.
/=	      x /= y	   x = x / y          The Division Assignment Operator divides a variable.
%=	      x %= y	   x = x % y          The Remainder Assignment Operator assigns a remainder to a variable
**=	      x **= y	   x = x ** y         The Exponentiation Assignment Operator raises a variable to the power of the operand.

let x = 10;
x /= 5;
RESULT = 2

let x = 5;
let y = 2;
let z = x % y;
RESULT = 1

Shift Assignment Operators

Operator	Example	      Same As
<<=	      x <<= y	      x = x << y           The left shift assignment (<<=) operator performs left shift on the two operands and assigns the result to the left operand.
>>=	      x >>= y	      x = x >> y           The right shift assignment (>>=) operator performs right shift on the two operands and assigns the result to the left operand. This operation is also called "sign-propagating right shift" or "arithmetic right shift", because the sign of the resulting number is the same as the sign of the first operand.
>>>=	    x >>>= y	    x = x >>> y          The unsigned right shift assignment (>>>=) operator performs unsigned right shift on the two operands and assigns the result to the left operand. This operation is also called "zero-filling right shift", because the sign bit becomes 0, so the resulting number is always positive. Unsigned right shift does not accept BigInt values.

let a = 5; // 00000000000000000000000000000101
a <<= 2; // 00000000000000000000000000010100
console.log(a);
RESULT = 20

let x = 5; //  00000000000000000000000000000101
x >>= 2; //  00000000000000000000000000000001
console.log(x);
RESULT = 1

let x = -2;
x >>>= 5;
console.log(x);
RESULT = 134217727

Bitwise Assignment Operators

Operator	Example	      Same As
&=	      x &= y	      x = x & y            The Bitwise AND Assignment Operator does a bitwise AND operation on two operands and assigns the result to the the variable - returns a number or BigInt whose binary representation has a 1 in each bit position for which the corresponding bits of both operands are 1.
^=	      x ^= y	      x = x ^ y            The Bitwise XOR Assignment Operator does a bitwise XOR operation on two operands and assigns the result to the variable. -  returns a number or BigInt whose binary representation has a 1 in each bit position for which the corresponding bits of either but not both operands are 1.
|=	      x |= y	      x = x | y            The Bitwise OR Assignment Operator does a bitwise OR operation on two operands and assigns the result to the variable. - - returns a number or BigInt whose binary representation has a 1 in each bit position for which the corresponding bits of either or both operands are 1.

let a = 5; // 00000000000000000000000000000101
a &= 3; // 00000000000000000000000000000011
console.log(a); // 00000000000000000000000000000001
// Expected output: 1

let a = 5; // 00000000000000000000000000000101
a ^= 3; // 00000000000000000000000000000011
console.log(a); // 00000000000000000000000000000110
// Expected output: 6

let a = 5; // 00000000000000000000000000000101
a |= 3; // 00000000000000000000000000000011
console.log(a); // 00000000000000000000000000000111
// Expected output: 7

Logical Assignment Operators

Operator	Example	      Same As
&&=     	x &&= y	      x = x && (x = y)      The Logical AND assignment operator is used between two values. If the first value is true, the second value is assigned.
||=	      x ||= y	      x = x || (x = y)      The Logical OR assignment operator is used between two values. If the first value is false, the second value is assigned.
??=	      x ??= y	      x = x ?? (x = y)      The Nullish coalescing assignment operator is used between two values. If the first value is undefined or null, the second value is assigned.

let x = 10;
x &&= 5;
RESULT = 5

let x = 10;
x ||= 5;
RESULT = 5

let x;
x ??= 5;
RESULT = 5

DATA TYPES
---------
---------

JavaScript has 8 Datatypes
1. String - You can use quotes inside a string, as long as they don't match the quotes surrounding the string:
2. Number - All JavaScript numbers are stored as decimal numbers (floating point).
3. Bigint - JavaScript BigInt is a new datatype (ES2020) that can be used to store integer values that are too big to be represented by a normal JavaScript Number.
4. Boolean - TRUE OR FALSE -  often used in conditional testing.
5. Undefined - a variable without a value, has the value undefined. The type is also undefined. - let car;    // Value is undefined, type is undefined
6. Null - An empty value has nothing to do with undefined. An empty string has both a legal value and a type. let car = "";    // The value is "", the typeof is "string"
7. Symbol
8. Object

The Object Datatype

The object data type can contain:
1. An object - JavaScript objects are written with curly braces {}. Object properties are written as name:value pairs, separated by commas. - const person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};
2. An array - JavaScript arrays are written with square brackets. Array items are separated by commas. - const cars = ["Saab", "Volvo", "BMW"];
3. A date

// Numbers:
let length = 16;
let weight = 7.5;

// Strings:
let color = "Yellow";
let lastName = "Johnson";

// Booleans
let x = true;
let y = false;

// Object:
const person = {firstName:"John", lastName:"Doe"};

// Array object:
const cars = ["Saab", "Volvo", "BMW"];

// Date object:
const date = new Date("2022-03-25");

let x;       // Now x is undefined
x = 5;       // Now x is a Number
x = "John";  // Now x is a String

let y = 123e5;    // 12300000
let z = 123e-5;   // 0.00123

COMPARISONS
-----------
-----------
GIVEN X=5
Operator	   Description	                           Comparing	     Returns	
==	           equal to                               x == 8	       false	
                                                      x == 5	       true	
                                                      x == "5"	     true	
===	           equal value and equal type	            x === 5	       true	
                                                      x === "5"	     false	
!=	           not equal                            	x != 8	       true	
!==	           not equal value or not equal type	    x !== 5	       false	
                                                      x !== "5"	     true	
                                                      x !== 8	       true	
>	             greater than                          	x > 8	         false	
<	             less than	                            x < 8	         true	
>=	           greater than or equal to	              x >= 8	       false	
<=	           less than or equal to	                x <= 8	       true

*Logical operators* - given x=6 and y=3

Operator	Description   	Example	
&&	        and	          (x < 10 && y > 1) is true	
||	        or	          (x == 5 || y == 5) is false	
!         	not	          !(x == y) is true


*Conditional (Ternary) Operator*
JavaScript also contains a conditional operator that assigns a value to a variable based on some condition.

Syntax
variablename = (condition) ? value1:value2 
Example
let voteable = (age < 18) ? "Too young":"Old enough";

*The Optional Chaining Operator (?.)*
The ?. operator returns undefined if an object is undefined or null (instead of throwing an error).
// Create an object:
const car = {type:"Fiat", model:"500", color:"white"};
// Ask for car name:
document.getElementById("demo").innerHTML = car?.name;
RESULT = undefined

conditions - IF ELSE AND ELSE IF
--------------------------------
--------------------------------

Use if to specify a block of code to be executed, if a specified condition is true
Use else to specify a block of code to be executed, if the same condition is false
Use else if to specify a new condition to test, if the first condition is false
Use switch to specify many alternative blocks of code to be executed

if (hour < 18) {
  greeting = "Good day";
}

if (hour < 18) {
  greeting = "Good day";
} else {
  greeting = "Good evening";
}

if (time < 10) {
  greeting = "Good morning";
} else if (time < 20) {
  greeting = "Good day";
} else {
  greeting = "Good evening";
}

SWITCH
------
------

When JavaScript reaches a break keyword, it breaks out of the switch block
The getDay() method returns the weekday as a number between 0 and 6.

switch (new Date().getDay()) {
  case 0:
    day = "Sunday";
    break;
  case 1:
    day = "Monday";
    break;
  case 2:
     day = "Tuesday";
    break;
  case 3:
    day = "Wednesday";
    break;
  case 4:
    day = "Thursday";
    break;
  case 5:
    day = "Friday";
    break;
  case 6:
    day = "Saturday";
}

Sometimes you will want different switch cases to use the same code. In this example case 4 and 5 share the same code block, and 0 and 6 share another code block:

switch (new Date().getDay()) {
  case 4:
  case 5:
    text = "Soon it is Weekend";
    break;
  case 0:
  case 6:
    text = "It is Weekend";
    break;
  default:
    text = "Looking forward to the Weekend";
}

If multiple cases matches a case value, the first case is selected.
If no matching cases are found, the program continues to the default label.
If no default label is found, the program continues to the statement(s) after the switch.
Switch cases use strict comparison (===).

FOR LOOP
--------
--------

Loops are handy, if you want to run the same code over and over again, each time with a different value.

Often this is the case when working with arrays:

Instead of writing:
text += cars[0] + "<br>";
text += cars[1] + "<br>";
text += cars[2] + "<br>";
text += cars[3] + "<br>";
text += cars[4] + "<br>";
text += cars[5] + "<br>";

for (let i = 0; i < cars.length; i++) {
  text += cars[i] + "<br>";
}

JavaScript supports different kinds of loops:

for - loops through a block of code a number of times
for/in - loops through the properties of an object
for/of - loops through the values of an iterable object
while - loops through a block of code while a specified condition is true
do/while - also loops through a block of code while a specified condition is true

for (expression 1; expression 2; expression 3) {
  // code block to be executed
}

for (let i = 0; i < 5; i++) {
  text += "The number is " + i + "<br>";
}
Expression 1 sets a variable before the loop starts (let i = 0).
Expression 2 defines the condition for the loop to run (i must be less than 5).
Expression 3 increases a value (i++) each time the code block in the loop has been executed.        ++	      Increment

You can initiate many values in expression 1 (separated by comma):

<p id="demo></p>
<script>
const cars = ["BMW", "Volvo", "Saab", "Ford"];
let i, len, text;
for (i = 0, len = cars.length, text = ""; i < len; i++) {
  text += cars[i] + "<br>";
}
document.getElementById("demo").innerHTML = text;
</script>

* <p id="demo></p>                 find the element called 'demo' within your HTML page and then the following bit of script will instruct the element
* Const                            Variable initializated outside the loop 
* Expression 1 - (let i = 0)       i equal 0
* Expression 2 - 
        len = cars.length          len equal the length of the array cars (in this context len = 4; its a static number in this example)
        text = ""                  text equal empty string
        i < len;                   if i is less then len (len in this context is static does not change) execute the logic on the body
* Expression 3 - i++               Increment the value of i of 1 (same as i = i + 1)
* Body -  += cars[i] + '<br>';     concatenate string at each iteration.
* document                         webpage (document object)
* getElementById("demo")           method that gets HTML element with ID 'demo'
* innerHTML                        HTML element; The innerHTML property sets or returns the HTML content (inner HTML) of an element.

Remember cars is an array and has got different method associated to it check reference and my personal note

Create a loop that runs from 0 to 9.
let i;
for (i = 0; i < 10; i++) {
  console.log(i);
}

const fruits = ["Apple", "Banana", "Orange"];
for (x of fruits) {
  console.log(x);
}
Iterable (array) object

WHILE LOOP
--------
--------
The while loop loops through a block of code as long as a specified condition is true.
The do while loop is a variant of the while loop. This loop will execute the code block once, before checking if the condition is true, then it will repeat the loop as long as the condition is true.

<body>
<h2>JavaScript While Loop</h2>
<p id="demo"></p>

<script>
let text = "";
let i = 0;
while (i < 10) {
  text += "<br>The number is " + i;
  i++;
}
document.getElementById("demo").innerHTML = text;
</script>
</body>

<body>
<h2>JavaScript Do While Loop</h2>
<p id="demo"></p>

<script>
let text = ""
let i = 0;

do {
  text += "<br>The number is " + i;
  i++;
}
while (i < 10);  

document.getElementById("demo").innerHTML = text;
</script>
</body>

Increment by 2

let i = 0;
while (i < 10) {
  console.log(i);
i = i+2;
}


FUNCTIONS
--------
--------

A JavaScript function is a block of code designed to perform a particular task.
A JavaScript function is executed when "something" invokes it (calls it).

function name(parameter1, parameter2, parameter3) {
  // code to be executed
}

Function parameters are listed inside the parentheses () in the function definition.
Function arguments are the values received by the function when it is invoked.
Inside the function, the arguments (the parameters) behave as local variables.

The code inside the function will execute when "something" invokes (calls) the function:
When an event occurs (when a user clicks a button)
When it is invoked (called) from JavaScript code
Automatically (self invoked)

With functions you can reuse code
You can write code that can be used many times.
You can use the same code with different arguments, to produce different results.


<h1>JavaScript Functions</h1>
<p>Invoke (call) a function that converts from Fahrenheit to Celsius:</p>
<p id="demo"></p>

<script>
function toCelsius(f) {
  return (5/9) * (f-32);
}

let value = toCelsius(77);
document.getElementById("demo").innerHTML = value;
</script>
</body>

<body>

<h1>JavaScript Functions</h1>
<p>Using a function as a variable:</p>
<p id="demo"></p>

<script>
let text = "The temperature is " + toCelsius(77) + " Celsius.";
document.getElementById("demo").innerHTML = text;

function toCelsius(fahrenheit) {
  return (5/9) * (fahrenheit-32);
} 
</script>
</body>

Variables declared within a JavaScript function, become LOCAL to the function. Local variables can only be accessed from within the function.


OBJECTS
--------
--------

Properties
	
car.name = Fiat

car.model = 500

car.weight = 850kg

car.color = white	

Methods

car.start()

car.drive()

car.brake()

car.stop()

All cars have the same properties, but the property values differ from car to car.
All cars have the same methods, but the methods are performed at different times.

Objects are variables too. But objects can contain many values.
This code assigns many values (Fiat, 500, white) to a variable named car:
const car = {type:"Fiat", model:"500", color:"white"};
The values are written as name:value pairs (name and value separated by a colon).
It is a common practice to declare objects with the const keyword.

You can access object properties in two ways:
person.lastName;
person["lastName"];

Objects can also have methods.
Methods are actions that can be performed on objects.
Methods are stored in properties as function definitions.

Property	Property Value
firstName	John
lastName	Doe
age       50
eyeColor	blue
fullName	function() {return this.firstName + " " + this.lastName;}

A method is a function stored as a property.

const person = {
  firstName: "John",
  lastName : "Doe",
  id       : 5566,
  fullName : function() {
    return this.firstName + " " + this.lastName;
  }
};

In the example above, this refers to the person object.
I.E. this.firstName means the firstName property of this.
I.E. this.firstName means the firstName property of person.

THIS
In an object method, this refers to the object.
Alone, this refers to the global object.
In a function, this refers to the global object.
In a function, in strict mode, this is undefined.
In an event, this refers to the element that received the event.
Methods like call(), apply(), and bind() can refer this to any object.

this is not a variable. It is a keyword. You cannot change the value of this.

In a function definition, this refers to the "owner" of the function.
In the example above, this is the person object that "owns" the fullName function.
In other words, this.firstName means the firstName property of this object.

Accessing Object Methods
objectName.methodName()
name = person.fullName();

Avoid String, Number, and Boolean objects. They complicate your code and slow down execution speed.



STRINGS
--------
--------






ARRAYS
--------
--------
